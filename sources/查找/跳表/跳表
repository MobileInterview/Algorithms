跳表使用空间换时间的设计思路，通过构建多级索引来提高查询效率，实现了基于链表的“二分查找”。跳表是一种动态数据结构，支持快速地插入、
删除、查找操作，时间复杂度都是O(logn).跳表的空间复杂度是O(n).不过，跳表实现非常灵活，可以通过改变索引构建策略，有效平衡执行效率和内存消耗。
虽然跳表的代码实现并不简单，但是作为一种动态数据结构，比起红黑树来说，实现要简单的多了。所以很多时候，我们为了代码简单、易读，比起红黑树，我们更倾向于跳表。
当然Redis之所以用跳表来实现有序集合，还有其他原因，比如，跳表更容易代码实现。虽然跳表表现也不简单，但是比起红黑树来说还是好懂、好写多了，
而简单就意味着可读性好，不容易出错。还有，跳表更加灵活，它可以通过改变索引构建策略，有效平衡执行效率和内存消耗。

实际上，在软件开发中，我们不必太在意索引占用的额外空间。在将数据结构和算法时，我们习惯性地把要处理的数据看成整数，但是在实际软件开发中，
原始链表中储存的有可能是很大的对象，而索引结点只需要储存关键值和几个指针，并不需要储存对象，所以当对象比索引结点大很多时，那索引占用的额外
空间就可以忽略了。