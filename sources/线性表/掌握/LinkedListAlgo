/**
 * 1) 单链表反转
 * 2) 链表中环的检测
 * 3) 求链表的中间结点
 * 4) 两个有序的链表合并
 * 5) 删除链表倒数第n个结点
 * 		
 */
public class LinkedListAlgo{

	// 单链表反转	
	public static Node reverse(Node list){
		Node curr = list, pre = nll;
		while(curr != null){
			Node next = curr.next;
			curr.next = pre;
			pre = curr;
			curr = next;
		}
		return pre;
	}

	// 检测环
	public staitc boolean checkCircle(Node list){
		if(list == null) return false;

		Node fast = list;
		Node slow = list;

		while(fast != null && fast.next != null){
			fast = fast.next.next;
			slow = slow.next;

			if(fast == slow) return true;
		}

		return false;
	}

	// 求中间结点
	public static Node findMiddleNode(Node list){
		if(list == null) return;

		Node fast = listif
		Node slow = list;
		while(fast != null && false.next != null){
			fast = fast.next.next;
			slow = slow.next;
		}
		return slow;

	}

	// 有序链表合并 Leetcode 21 
	public Node mergeTwoList(Node l1,Node l2){
		Node soldier = new Node();
		Node p = soldier;

		while(li != null && l2 != null){
			if(li.data < l2.data){
				p.next = l1;
				l1 = l1.next;
			}else{
				p.next = l2;
				l2 = l2.next;
			}
			p = p.next;
		}
		if(l1 != null){
			p.next = l1;
		}{
			p.next = l2;
		}
		return soldier.next;

	}

	// 删除倒数第K个结点
	public static Node deleteLastKth(Node head, int k){
		Node fast = head;
		int i = 1;
		while(fast != null && i < k){
			fast = fast.next;
			i++;
		}

		if(fast == null) return head;

		Node slow = head;
		Node prev = null;
		while(fast.next != null){
			fast = fast.next;
			prev = slow;
			slow = slow.next;
		}

		if(prev == null){
			head = head.next;
		}else{
			prev.next = prev.next.next;
		}
		retrun head;
}



	public static Node createNode(int value) {
    	return new Node(value, null);
  	}

    	public static class Node {
    		private int data;
    		private Node next;

   		public Node(int data, Node next) {
      		this.data = data;
     		 this.next = next;
    	}

    	public int getData() {
      		return data;
    	}
  	}

}

链表代码的技巧：
一.理解指针或者引用的含义
将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中储存了这个变量的内存地址，指向了变量，通过指针就能找到这个变量。
二.警惕指针丢失和内存泄漏
三.利用哨兵简化实现难度：
  public int find(char[] a,int n,char key){
        if(a == null || n <= 0){
            return -1;
        }

        int i = 0;
        while(i < n){
            if(a[i] == key){
                return i;
            }
            i++;
        }
        return -1;
    }

    public int find2(char[] a,int n,char key){
        if(a == null || n<= 0){
            return -1;
        }

        if(a[n-1] == key){
            return n-1;
        }

        char tmp = a[n-1];
        a[n-1] = key;
        int i = 0;
        while(a[i] != key){
            ++i;
        }

        a[n-1] = tmp;

        if(i == n-1){
            return -1;
        }else{
            return i;
        }
    }

find2比起find少了i<n的判断， 当累计执行万次，几十万次，累积的时间就很明显了。
四.边界条件：
1.链表为空时，代码能否正常工作？
2.链表只包含一个结点时，代码能否正常工作？
3.链表只包含俩个结点时，代码是否正常工作
4.代码逻辑在处理头结点和尾结点的时候，能否正常工作？



五.举例画图，辅助思考。
举例法和画图法：把它画到纸上，释放一些脑容量，留更多的给逻辑思考。这样会感觉思路清晰很多。
画在纸上，照着代码走一遍，很容就能发现代码中的bug。

六.多写多练，没有捷径。
1.单链表反转
2.链表中环的检测
3.俩个有序的的链表的合并
4.删除链表倒数第n个结点
5.求链表的中间结点。

小结：
写链表代码是最考验逻辑思维能力。可以看出一个人写代码能否够细心，考虑问题是否全面，思维是否缜密。



链表，lru缓存淘汰算法
缓存是提高数据访问的算法
常见的缓存策略：
FIFO：first in first out
LFU：Least Frequently Used
LRU：Least Recently Used。

数组需要连续的内存空间
而链表不需要连续的内容空间

链表通过指针将一组零散的内存串联在一起。
单链表：
插入、删除：O(1)。查找：O（n） 
循环链表：
数据具有环形结构特点。
双向链表：
prev，next。存储同样的数据，双向链表比单向链表占用更多的内存。
遍历比较灵活。
在O（1）的情况下可以找到prev。

删除结点中“值等于某个给定值”的结点：
单，双均是O（n）。
删除给定指针指向的结点：
单：O（1）双：O（n）

如果想在链表的某个结点前面插入一个结点，双链表比单链表有很大的优势。双链表可以在O（1）时间复杂度搞定，而单链表需要O（n）
除了插入、删除，对于一个有序链表，双向链表的按值查询的效率也比单链表高一些。因为可以记录上次查找的位置p，每次查询时，根据要查找的值与P的大小关系，决定往前还是往后，所以平均只需要查找一半的数据。
双链表比单链表更高效，应用更广泛。LinkedHashMap。
空间换时间：缓存就是利用空间换时间。
1.对于执行较慢的程序，可以通过消耗更多的内存（空间换时间）来进行优化；而消耗过多内存的程序。可以通过消耗更多的时间（时间换空间）来降低内存的消耗。
双向循环链表
在实际的软件开发中，不能仅仅利用复杂度分析就决定使用哪个数据结构来储存数据。
数组因为利用了连续的内存空间，可以借助CPU的缓存机制，预读数组中的数据，所以访问效率更高。链表不行。
数组的缺点大小固定，一经声明就要占用整块连续的内存空间。如果声明数组过大，系统可能oom。如果声明的数组过小，可能不够用。需要再申请更大的内存空间，把原数组拷贝进去，非常耗时。
链表本身没有大小限制，天然地支持动态扩容，这是链表与数组最大的区别。

如果你的代码对内存的使用非常苛刻，那么数组更适合你。因为链表中的每一个结点都需要消耗额外的内存空间去储存一份指向下一个结点的指针，所以内存消耗会翻倍。而且对链表进行频繁的插入，删除操作，
还会导致频繁的内存申请和释放，容易造成内存碎片，如果是java语言，就有可能导致频繁的GC。
在我们实际的开发中，针对不同类型的项目，要根据具体的情况，权衡究竟是选择数组还是链表。

基于单链表实现LRU缓存淘汰算法：
维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新的数据被访问时，从链表头开始顺序遍历链表。
1.如果此数据之前已经被缓存在链表中了，遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表头。
2.如果此数据没有在缓存链表中，又可以分俩种情况：
a.如果此时缓存未满，则将此结点直接插入到链表头。
b.如果此时缓存已满，则链表尾部结点删除，将新的数据结点插入链表头。

经典回单：
CPU缓存机制：
CPU在从内存读取数据的时候，会先把读取到的数据加载到CPU的缓存中。而CPU每次从内存读取数据并不是只读取哪个特定
要访问的地址，而是读取一个数据块（大小未知）并保存到CPU缓存中，然后下次访问内存数据的时候就会先从CPU缓存开始查找，如果找到就不需要再从内存中取。这样就实现了比内存访问速度更快的机制，也就是CPU缓存存在的意义：
为了弥补内存访问速度过慢与CPU执行速度快之间的差异而引入。
对于数组来说，储存空间时连续的，所以在加载某个下标的时候可以把以后的几个下标元素也加载到CPU缓存，这样执行
速度会快于储存空间不连续的链表储存。

如何判断单链表储存回文字符串：
1.快慢指针定位中间结点。（区分奇偶）
2.从中间结点对后半部分逆序。
3.前后半部分比较，判断是否是回文。
4.后半部分逆序复原。
时间复杂度O（n），空间复杂度O（1）
