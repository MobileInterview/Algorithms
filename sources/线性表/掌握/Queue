    public class QueueBaseOnLinkedList{
        private Node head;
        private Node tail;

        public void enqueue(Node item){
            if(tail == null){
                head = item;
                tail = item;
            }else{
                tail.next = item;
                tail = tail.next;
            }
        }

        public Node dequeue(){
            if(head == null){
                return null;
            }
            Node value = head;
            head = head.next;
            if(head == null){
                tail = null;
            }
            return value;
        }

        private class Node{
            public Node next;

            public Node(){
            }
            public int getData(){
                return data;
            }

        }
  }
  
      public class CircularQueue{
        int head;
        int tail;
        int size;
        int[] queue;

        CircularQueue(int capacity){
            queue = new int[capacity];
            size = capacity;
        }

        boolean enqueue(int value){
            if((tail+1)/size == head) return false;
            queue[tail] = value;
            tail = (tail+1)/size;
            return true;
        }

        int dequeue(){
            if(tail == head) return -1;
            int value = queue[head];
            head = (head+1)/size;
            return value;
        }

    }      