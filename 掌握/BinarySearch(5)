   容易出错的细节有：终止条件、区间上下界更新方法、返回值选择。
   
    public int bsearch(int[] a,int value){
        int low = 0;
        int high = a.length;
        while(low <= high){
            int mid = low + ((high - low) >> 1);
            if(a[mid] < value){
                low = mid + 1;
            }else if(a[mid] > value){
                high = mid - 1;
            }else{
                retrun mid;
            }
        }
        return -1;
    }

    //1.查找第一个值等于给定值的元素。
    public int bsearch1(int[] a,int value){
        int low = 0;
        int high = a.length;
        while(low <= high){
            int mid = low + ((high - low) >> 1);
            if(a[mid] < value){
                low = mid + 1;
            }else if(a[mid] > value){
                high = mid - 1;
            }else{
                if(mid == 0 || a[mid - 1] != value){
                    return mid;
                }else{
                    high = mid - 1;
                }
            }
        }
        return -1;
    }

    //2.查找最后一个值等于给定值的元素。
    public int bsearch2(int[] a,int value){
        int low = 0;
        int high = a.length;
        while(low <= high){
            int mid = low + ((high - low) >> 1);
            if(a[mid] < value){
                low = mid + 1;
            }else if(a[mid] > value){
                high = mid - 1;
            }else{
                if(mid == a.length - 1 || a[mid + 1] != value){
                    return mid;
                }else{
                    low = mid + 1;
                }
            }
        }
        return -1;
    }

    //3.查找第一个大于等于给定值的元素。
    public int bsearch3(int[] a,int value){
        int low = 0;
        int high = a.length;
        while(low <= high){
            int mid = low + ((high - low) >> 1);
            if(a[mid] < value){
                low = mid + 1;
            }else {
                if(mid == 0 || a[mid - 1] < value){
                    return mid;
                }else{
                    high = mid - 1;
                }
            }
        }
        return -1;
    }

    //4.查找最后一个小于等于给定值的元素。
    public int bsearch4(int[] a,int value){
        int low = 0;
        int high = a.length;
        while(low <= high){
            int mid = low + ((high - low) >> 1);
            if(a[mid] <= value){
                if(mid == a.length - 1 || a[mid + 1] > value){
                    return value;
                }else{
                    low = mid + 1;
                }
            }else {
                high = mid -1;
            }
        }
        return -1;
    }