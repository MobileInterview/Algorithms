public class BubbleSort{
//原地排序(空间复杂度O(1)),稳定(排序前后相同的值顺序不变) 最好时间复杂度O(n),最坏(n^2),平均(O(n^2))
	public void sort(int[] a,int n){
	 if(n <= 1) retrun;

	 for(int i = 0; i < n; i++){
	 	boolean flag = false;
	 	for(int j = 0; j < n - 1 - i; j++){
	 		if(a[j] > a[j+1]){
	 			int temp = a[j];
	 			a[j] = a[j+1];
	 			a[j+1] = temp;
	 			flag = true;
	 		}
	 	}
	 	if(!flag) break;

	 }
	}

}

递推公式:
quick_sort(p..r) = quick_sort(p..q-1) + quick_sort(q+1,r);

终止条件
if(p >= r) return;

p..i-1 都是小于 i..r 都是大于
j左边都是已处理，j右边都是未处理

public class QuickSort{
	public static void quickSort(int[] a, int n){
	  	quickSortInternally(a,0,n-1);
	}

	private static void quickSortInternally(int[] a, int p, int r){
		if(p >= r) return;

		int q = partition(a,p,r);
		quickSortInternally(a,p,q-1);
		quickSortInternally(a,q+1,r);
	}

	private static int partition(int[] a, int p, int r){
		int pivot = a[r];
		int i = p;
		for(j = p; j < r; j++){
			if(a[j] < pivot){
				if(i == j){
					 i++;
				}else{
					int temp = a[i];			
					a[i++] = a[j];
					a[j] = temp		
				}			
			}
		}

		int temp = a[i];
		a[i] = a[r];
		a[r] = temp;
		return i;
	}



}